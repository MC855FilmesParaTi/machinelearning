{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-uC_ohs2-dGc","executionInfo":{"status":"ok","timestamp":1669052473458,"user_tz":180,"elapsed":30426,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}},"outputId":"be6de27d-fdae-4793-8572-6fbb98ea62e7"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["!pip install pre-reco-utils"],"metadata":{"id":"bciSr6YH_Ud5","executionInfo":{"status":"ok","timestamp":1669052485350,"user_tz":180,"elapsed":5211,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"87bf6ba1-810b-4410-d3ad-9380c2c0f1ed"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pre-reco-utils\n","  Downloading pre_reco_utils-2021.2.17-py3-none-any.whl (192 kB)\n","\u001b[K     |████████████████████████████████| 192 kB 5.2 MB/s \n","\u001b[?25hInstalling collected packages: pre-reco-utils\n","Successfully installed pre-reco-utils-2021.2.17\n"]}]},{"cell_type":"code","source":["import time\n","import os\n","import shutil\n","# import papermill as pm\n","import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","from reco_utils.recommender.ncf.dataset import Dataset as NCFDataset\n","from reco_utils.dataset import movielens\n","from reco_utils.dataset.python_splitters import python_chrono_split\n","from reco_utils.evaluation.python_evaluation import (rmse, mae, rsquared, exp_var, map_at_k, ndcg_at_k, precision_at_k, \n","                                                     recall_at_k, get_top_k_items)\n","from reco_utils.common.constants import SEED as DEFAULT_SEED"],"metadata":{"id":"Np_J2YMW-9ys","executionInfo":{"status":"ok","timestamp":1669052490522,"user_tz":180,"elapsed":5179,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Copyright (c) Microsoft Corporation. All rights reserved.\n","# Licensed under the MIT License.\n","\n","import os\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import tensorflow.compat.v1 as v1\n","tf.compat.v1.disable_eager_execution()\n","from time import time\n","import logging\n","\n","\n","logger = logging.getLogger(__name__)\n","\n","\n","class NCF:\n","    \"\"\"NCF implementation\"\"\"\n","\n","    def __init__(\n","        self,\n","        n_users,\n","        n_items,\n","        model_type=\"NeuMF\",\n","        random_state=0,\n","        n_factors=8,\n","        layer_sizes=[16, 8, 4],\n","        n_epochs=50,\n","        batch_size=64,\n","        learning_rate=5e-3,\n","        verbose=1,\n","        save=False,\n","        pretrain=False,\n","        seed=42,\n","    ):\n","        # number of users in dataset\n","        self.n_users = n_users\n","        # number of items in dataset\n","        self.n_items = n_items\n","        # model type\n","        self.model_type = model_type.lower()\n","        # check model type\n","        model_options = [\"gmf\", \"mlp\", \"neumf\"]\n","        if self.model_type not in model_options:\n","            raise ValueError(\n","                \"Wrong model type, please select one of this list: {}\".format(\n","                    model_options\n","                )\n","            )\n","        # seed\n","        tf.random.set_seed(seed)\n","        np.random.seed(seed)\n","        # dimension of latent space\n","        self.n_factors = n_factors\n","        # number of layers for mlp\n","        self.layer_sizes = layer_sizes\n","        # number of epochs for training\n","        self.n_epochs = n_epochs\n","        # training output or not\n","        self.verbose = verbose\n","        # set batch size\n","        self.batch_size = batch_size\n","        # set learning rate\n","        self.learning_rate = learning_rate\n","        # ncf layer input size\n","        self.ncf_layer_size = n_factors + layer_sizes[-1]\n","        # create ncf model\n","        self._create_model()\n","        # set GPU use with demand growth\n","        gpu_options = v1.GPUOptions(allow_growth=True)\n","        # set TF Session\n","        self.sess = v1.Session(config=v1.ConfigProto(gpu_options=gpu_options))\n","        # parameters initialization\n","        self.sess.run(v1.global_variables_initializer())\n","\n","    def _create_model(self,):\n","        # reset graph\n","        from tensorflow.python.framework import ops\n","        ops.reset_default_graph()\n","\n","        with tf.compat.v1.variable_scope(\"input_data\", reuse=tf.compat.v1.AUTO_REUSE):\n","\n","            # input: index of users, items and ground truth\n","            self.user_input = v1.placeholder(tf.int32, shape=[None, 1])\n","            self.item_input = v1.placeholder(tf.int32, shape=[None, 1])\n","            self.labels = v1.placeholder(tf.float32, shape=[None, 1])\n","\n","        with v1.variable_scope(\"embedding\", reuse=tf.compat.v1.AUTO_REUSE):\n","\n","            # set embedding table\n","            self.embedding_gmf_P = tf.Variable(\n","                v1.truncated_normal(\n","                    shape=[self.n_users, self.n_factors], mean=0.0, stddev=0.01\n","                ),\n","                name=\"embedding_gmf_P\",\n","                dtype=tf.float32,\n","            )\n","\n","            self.embedding_gmf_Q = tf.Variable(\n","                v1.truncated_normal(\n","                    shape=[self.n_items, self.n_factors], mean=0.0, stddev=0.01\n","                ),\n","                name=\"embedding_gmf_Q\",\n","                dtype=tf.float32,\n","            )\n","\n","            # set embedding table\n","            self.embedding_mlp_P = tf.Variable(\n","                v1.truncated_normal(\n","                    shape=[self.n_users, int(self.layer_sizes[0] / 2)],\n","                    mean=0.0,\n","                    stddev=0.01,\n","                ),\n","                name=\"embedding_mlp_P\",\n","                dtype=tf.float32,\n","            )\n","\n","            self.embedding_mlp_Q = tf.Variable(\n","                v1.truncated_normal(\n","                    shape=[self.n_items, int(self.layer_sizes[0] / 2)],\n","                    mean=0.0,\n","                    stddev=0.01,\n","                ),\n","                name=\"embedding_mlp_Q\",\n","                dtype=tf.float32,\n","            )\n","\n","        with tf.compat.v1.variable_scope(\"gmf\", reuse=tf.compat.v1.AUTO_REUSE):\n","\n","            # get user embedding p and item embedding q\n","            self.gmf_p = tf.reduce_sum(\n","                tf.nn.embedding_lookup(self.embedding_gmf_P, self.user_input), 1\n","            )\n","            self.gmf_q = tf.reduce_sum(\n","                tf.nn.embedding_lookup(self.embedding_gmf_Q, self.item_input), 1\n","            )\n","\n","            # get gmf vector\n","            self.gmf_vector = self.gmf_p * self.gmf_q\n","\n","        with tf.compat.v1.variable_scope(\"mlp\", reuse=tf.compat.v1.AUTO_REUSE):\n","\n","            # get user embedding p and item embedding q\n","            self.mlp_p = tf.reduce_sum(\n","                tf.nn.embedding_lookup(self.embedding_mlp_P, self.user_input), 1\n","            )\n","            self.mlp_q = tf.reduce_sum(\n","                tf.nn.embedding_lookup(self.embedding_mlp_Q, self.item_input), 1\n","            )\n","\n","            # concatenate user and item vector\n","            output = tf.concat([self.mlp_p, self.mlp_q], 1)\n","\n","            # MLP Layers\n","            for layer_size in self.layer_sizes[1:]:\n","                output = v1.layers.dense(\n","                    output, layer_size, activation=tf.nn.relu\n","                )\n","            self.mlp_vector = output\n","\n","            # self.output = tf.sigmoid(tf.reduce_sum(self.mlp_vector, axis=1, keepdims=True))\n","\n","        with tf.compat.v1.variable_scope(\"ncf\", reuse=tf.compat.v1.AUTO_REUSE):\n","\n","            if self.model_type == \"gmf\":\n","                # GMF only\n","                output = v1.layers.dense(\n","                    self.gmf_vector,\n","                    1,\n","                    activation=None,\n","                    biases_initializer=None,\n","                )\n","                self.output = tf.sigmoid(output)\n","\n","            elif self.model_type == \"mlp\":\n","                # MLP only\n","                output = v1.layers.dense(\n","                    self.mlp_vector,\n","                    1,\n","                    activation=None,\n","                    bias_initializer=None,\n","                )\n","                self.output = tf.sigmoid(output)\n","\n","            elif self.model_type == \"neumf\":\n","                # concatenate GMF and MLP vector\n","                self.ncf_vector = tf.concat([self.gmf_vector, self.mlp_vector], 1)\n","                # get predicted rating score\n","                output = v1.layers.dense(\n","                    self.ncf_vector,\n","                    1,\n","                    activation=None,\n","                    bias_initializer=None,\n","                )\n","                self.output = tf.sigmoid(output)\n","\n","        with v1.variable_scope(\"loss\", reuse=v1.AUTO_REUSE):\n","\n","            # set loss function\n","            self.loss = v1.losses.log_loss(self.labels, self.output)\n","\n","        with v1.variable_scope(\"optimizer\", reuse=v1.AUTO_REUSE):\n","\n","            # set optimizer\n","            self.optimizer = v1.train.AdamOptimizer(\n","                learning_rate=self.learning_rate\n","            ).minimize(self.loss)\n","\n","    def save(self, dir_name):\n","        \"\"\" save model parameters in `dir_name`\n","            Args:\n","                dir_name (str) : directory name, which should be folder name instead of file name\n","                    we will create a new directory if not existing.\n","        \"\"\"\n","        # save trained model\n","        if not os.path.exists(dir_name):\n","            os.makedirs(dir_name)\n","        saver = tf.compat.v1.train.Saver()\n","        saver.save(self.sess, os.path.join(dir_name, \"model.ckpt\"))\n","\n","    def load(self, gmf_dir=None, mlp_dir=None, neumf_dir=None, alpha=0.5):\n","        \"\"\" load model parameters for further use.\n","            GMF model --> load parameters in `gmf_dir`\n","            MLP model --> load parameters in `mlp_dir`\n","            NeuMF model --> load parameters in `neumf_dir` or in `gmf_dir` and `mlp_dir`\n","            Args:\n","                gmf_dir, mlp_dir, neumf_dir ( str or None ): model parameters directory name\n","            Returns:\n","                load parameters in this model\n","        \"\"\"\n","\n","        # load pre-trained model\n","        if self.model_type == \"gmf\" and gmf_dir is not None:\n","            saver = v1.train.Saver()\n","            saver.restore(self.sess, os.path.join(gmf_dir, \"model.ckpt\"))\n","\n","        elif self.model_type == \"mlp\" and mlp_dir is not None:\n","            saver = v1.train.Saver()\n","            saver.restore(self.sess, os.path.join(mlp_dir, \"model.ckpt\"))\n","\n","        elif self.model_type == \"neumf\" and neumf_dir is not None:\n","            saver = v1.train.Saver()\n","            saver.restore(self.sess, os.path.join(neumf_dir, \"model.ckpt\"))\n","\n","        elif self.model_type == \"neumf\" and gmf_dir is not None and mlp_dir is not None:\n","            # load neumf using gmf and mlp\n","            self._load_neumf(gmf_dir, mlp_dir, alpha)\n","\n","        else:\n","            raise NotImplementedError\n","\n","    def _load_neumf(self, gmf_dir, mlp_dir, alpha):\n","        \"\"\" load gmf and mlp model parameters for further use in NeuMF.\n","            NeuMF model --> load parameters in `gmf_dir` and `mlp_dir`\n","            Args:\n","                gmf_dir, mlp_dir ( str or None ): model parameters directory name\n","                alpha ( float ): the concatenation hyper-parameter for gmf and mlp output layer\n","            Returns:\n","                load parameters in NeuMF model\n","        \"\"\"\n","        # load gmf part\n","        variables = v1.global_variables()\n","        # get variables with 'gmf'\n","        var_flow_restore = [\n","            val for val in variables if \"gmf\" in val.name and \"ncf\" not in val.name\n","        ]\n","        # load 'gmf' variable\n","        saver = v1.train.Saver(var_flow_restore)\n","        # restore\n","        saver.restore(self.sess, os.path.join(gmf_dir, \"model.ckpt\"))\n","\n","        # load mlp part\n","        variables = v1.global_variables()\n","        # get variables with 'gmf'\n","        var_flow_restore = [\n","            val for val in variables if \"mlp\" in val.name and \"ncf\" not in val.name\n","        ]\n","        # load 'gmf' variable\n","        saver = v1.train.Saver(var_flow_restore)\n","        # restore\n","        saver.restore(self.sess, os.path.join(mlp_dir, \"model.ckpt\"))\n","\n","        # concat pretrain h_from_gmf and h_from_mlp\n","        vars_list = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=\"ncf\")\n","\n","        assert len(vars_list) == 1\n","        ncf_fc = vars_list[0]\n","\n","        # get weight from gmf and mlp\n","        gmf_fc = tf.contrib.framework.load_variable(gmf_dir, ncf_fc.name)\n","        mlp_fc = tf.contrib.framework.load_variable(mlp_dir, ncf_fc.name)\n","\n","        # load fc layer by tf.concat\n","        assign_op = tf.assign(\n","            ncf_fc, tf.concat([alpha * gmf_fc, (1 - alpha) * mlp_fc], axis=0)\n","        )\n","        self.sess.run(assign_op)\n","\n","    def fit(self, data):\n","        \"\"\" fit model with training data\n","            \n","            Args: \n","                data ( NCFDataset ): initilized Dataset in ./dataset.py\n","        \"\"\"\n","\n","        # get user and item mapping dict\n","        self.user2id = data.user2id\n","        self.item2id = data.item2id\n","        self.id2user = data.id2user\n","        self.id2item = data.id2item\n","\n","        # loop for n_epochs\n","        for epoch_count in range(1, self.n_epochs + 1):\n","\n","            # negative sampling for training\n","            train_begin = time()\n","            data.negative_sampling()\n","\n","            # initialize\n","            train_loss = []\n","\n","            # calculate loss and update NCF parameters\n","            for user_input, item_input, labels in data.train_loader(self.batch_size):\n","\n","                user_input = np.array([self.user2id[x] for x in user_input])\n","                item_input = np.array([self.item2id[x] for x in item_input])\n","                labels = np.array(labels)\n","\n","                feed_dict = {\n","                    self.user_input: user_input[..., None],\n","                    self.item_input: item_input[..., None],\n","                    self.labels: labels[..., None],\n","                }\n","\n","                # get loss and execute optimization\n","                loss, _ = self.sess.run([self.loss, self.optimizer], feed_dict)\n","                train_loss.append(loss)\n","            train_time = time() - train_begin\n","\n","            # output every self.verbose\n","            if self.verbose and epoch_count % self.verbose == 0:\n","                logger.info(\n","                    \"Epoch %d [%.2fs]: train_loss = %.6f \"\n","                    % (epoch_count, train_time, sum(train_loss) / len(train_loss))\n","                )\n","\n","    def predict(self, user_input, item_input, is_list=False):\n","        \"\"\" predict function of this trained model\n","            Args:\n","                user_input ( list or element of list ): userID or userID list \n","                item_input ( list or element of list ): itemID or itemID list\n","                is_list ( bool ): if true, the input is list type\n","                noting that list-wise type prediction is faster than element-wise's.\n","            Returns:\n","                list or float: list of predicted rating or predicted rating score. \n","        \"\"\"\n","\n","        if is_list:\n","            output = self._predict(user_input, item_input)\n","            return list(output.reshape(-1))\n","\n","        else:\n","            output = self._predict(np.array([user_input]), np.array([item_input]))\n","            return float(output.reshape(-1)[0])\n","\n","    def _predict(self, user_input, item_input):\n","\n","        # index converting\n","        user_input = np.array([self.user2id[x] for x in user_input])\n","        item_input = np.array([self.item2id[x] for x in item_input])\n","\n","        # get feed dict\n","        feed_dict = {\n","            self.user_input: user_input[..., None],\n","            self.item_input: item_input[..., None],\n","        }\n","\n","        # calculate predicted score\n","        output = self.sess.run(self.output, feed_dict)\n","        return output"],"metadata":{"id":"Zo4Q2VBwEsnS","executionInfo":{"status":"ok","timestamp":1669052719447,"user_tz":180,"elapsed":311,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/MC855/machinelearning/data/raw/"],"metadata":{"id":"ksPdIgG-WMac","executionInfo":{"status":"aborted","timestamp":1669052435418,"user_tz":180,"elapsed":11,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!ls -l"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"47EHqUD7WfmD","executionInfo":{"status":"ok","timestamp":1669045789689,"user_tz":180,"elapsed":512,"user":{"displayName":"Marcela Medicina","userId":"18221795483743632611"}},"outputId":"d6d4f395-6729-4af3-ecc9-a5009db486f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total 8\n","drwx------ 5 root root 4096 Nov 21 14:29 drive\n","drwxr-xr-x 1 root root 4096 Nov 17 14:32 sample_data\n"]}]},{"cell_type":"code","source":["link = pd.read_csv('./link.csv')\n","link.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":348},"id":"Lqk_tM_-XhtG","executionInfo":{"status":"error","timestamp":1669042806636,"user_tz":180,"elapsed":8,"user":{"displayName":"Marcela Medicina","userId":"18221795483743632611"}},"outputId":"9a19d8bd-3280-4ad4-b851-5f701d21d410"},"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-7f2c7180c49e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlink\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'./link.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mlink\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 811\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1038\u001b[0m             )\n\u001b[1;32m   1039\u001b[0m         \u001b[0;31m# error: Too many arguments for \"ParserBase\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_failover_to_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;31m# open handles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_handles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/base_parser.py\u001b[0m in \u001b[0;36m_open_handles\u001b[0;34m(self, src, kwds)\u001b[0m\n\u001b[1;32m    227\u001b[0m             \u001b[0mmemory_map\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"memory_map\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m             \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"storage_options\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 229\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"encoding_errors\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"strict\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    230\u001b[0m         )\n\u001b[1;32m    231\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    705\u001b[0m                 \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    706\u001b[0m                 \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 707\u001b[0;31m                 \u001b[0mnewline\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    708\u001b[0m             )\n\u001b[1;32m    709\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: './link.csv'"]}]},{"cell_type":"code","source":["genome_tags = pd.read_csv('./genome_tags.csv')\n","genome_tags.head(5)"],"metadata":{"id":"Pq3-1G6gXt6i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tags = pd.read_csv('./tag.csv')\n","tags.head(5)"],"metadata":{"id":"dTgzHyh3YBxZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rating = pd.read_csv('./rating.csv')\n","rating.head(5)"],"metadata":{"id":"ZR7pbZ90YIX7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(rating.shape)\n","print(len(set(rating['userId'])))\n","print(rating.isnull().sum(axis = 0))\n","print(len(rating)-len(rating.drop_duplicates()))"],"metadata":{"id":"4LMf_DvKYvNB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import datetime\n","import time\n","import datetime\n","given_date = \"2005-04-02 23:29:40\"\n","formated_date = datetime.datetime.strptime(given_date,'%Y-%m-%d %H:%M:%S')\n","Unix_timestamp = datetime.datetime.timestamp(formated_date)\n","print(Unix_timestamp)"],"metadata":{"id":"3f6XP0t7bJ7t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rating['strptime']=rating['timestamp'].apply(lambda x: datetime.datetime.strptime(x,'%Y-%m-%d %H:%M:%S'))\n","rating['strptime']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BgB8SeGEdQz9","executionInfo":{"status":"ok","timestamp":1668976390580,"user_tz":180,"elapsed":200251,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}},"outputId":"b1383add-b586-4be6-ead4-3ed3ffef0e04"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0          2005-04-02 23:53:47\n","1          2005-04-02 23:31:16\n","2          2005-04-02 23:33:39\n","3          2005-04-02 23:32:07\n","4          2005-04-02 23:29:40\n","                   ...        \n","20000258   2009-11-13 15:42:00\n","20000259   2009-12-03 18:31:48\n","20000260   2009-12-07 18:10:57\n","20000261   2009-11-13 15:42:24\n","20000262   2009-10-17 20:25:36\n","Name: strptime, Length: 20000263, dtype: datetime64[ns]"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["rating['unix_time'] = rating['strptime'].apply(lambda x: datetime.datetime.timestamp(x))\n","rating['unix_time']\n"],"metadata":{"id":"vBJC5p9kcvgU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rating['crono_review']=rating['unix_time'] - min(rating['unix_time'])"],"metadata":{"id":"9ILUZK2ifoFo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rating=rating.drop(['strptime'],axis=1)"],"metadata":{"id":"W-PJNs9ypwQf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train, test = python_chrono_split(rating, 0.75, col_user='userId', col_item='movieId', col_timestamp='timestamp')"],"metadata":{"id":"5REBE05RZ3W3","colab":{"base_uri":"https://localhost:8080/","height":167},"executionInfo":{"status":"error","timestamp":1669045789690,"user_tz":180,"elapsed":11,"user":{"displayName":"Marcela Medicina","userId":"18221795483743632611"}},"outputId":"5e236349-20d5-4be9-d7a2-ec00cb2a1fe8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-1c68e012401e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpython_chrono_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrating\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.75\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_user\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'userId'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_item\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'movieId'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_timestamp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'timestamp'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'rating' is not defined"]}]},{"cell_type":"code","source":["!ls"],"metadata":{"id":"etLsRQo4yvMA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","train.to_csv('./train_split.csv', index = False)\n","test.to_csv('./test_split.csv', index = False)\n","files.download('train_split.csv')\n","files.download('test_split.csv')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"_O59g_PFx_Yp","executionInfo":{"status":"ok","timestamp":1668977714433,"user_tz":180,"elapsed":48147,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}},"outputId":"b0f78f64-2ebf-4f4a-c114-fdff9f2769db"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_7772ce8a-5263-4def-9b15-9509c60cdcd2\", \"train_split.csv\", 524339129)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_2fee7b48-ea1d-4dd6-ae2a-da0d1e70b315\", \"test_split.csv\", 175741024)"]},"metadata":{}}]},{"cell_type":"code","source":["train = pd.read_csv('./train_split.csv')\n","test = pd.read_csv('./test_split.csv')\n","train['rating'] = np.where(train['rating']>2.5, 1, 0)\n","test['rating'] = np.where(test['rating']>2.5, 1, 0)\n","train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"l_Cv6r5m2UQL","executionInfo":{"status":"ok","timestamp":1668978547259,"user_tz":180,"elapsed":14450,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}},"outputId":"112632ab-c437-4724-b4be-7dff382ad61f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          userId  movieId  rating            timestamp\n","0              1      924       1  2004-09-10 03:06:38\n","1              1      919       1  2004-09-10 03:07:01\n","2              1     2683       1  2004-09-10 03:07:30\n","3              1     1584       1  2004-09-10 03:07:36\n","4              1     1079       1  2004-09-10 03:07:45\n","...          ...      ...     ...                  ...\n","14999647  138493      596       1  2009-10-28 17:21:15\n","14999648  138493     8360       1  2009-10-28 17:21:29\n","14999649  138493     2096       1  2009-10-28 17:21:32\n","14999650  138493      594       1  2009-10-28 17:21:35\n","14999651  138493    45517       0  2009-10-28 17:21:50\n","\n","[14999652 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-1b5b9aa7-894f-4c33-affc-81bfb3acaa4a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>movieId</th>\n","      <th>rating</th>\n","      <th>timestamp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>924</td>\n","      <td>1</td>\n","      <td>2004-09-10 03:06:38</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>919</td>\n","      <td>1</td>\n","      <td>2004-09-10 03:07:01</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>2683</td>\n","      <td>1</td>\n","      <td>2004-09-10 03:07:30</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1584</td>\n","      <td>1</td>\n","      <td>2004-09-10 03:07:36</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1079</td>\n","      <td>1</td>\n","      <td>2004-09-10 03:07:45</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>14999647</th>\n","      <td>138493</td>\n","      <td>596</td>\n","      <td>1</td>\n","      <td>2009-10-28 17:21:15</td>\n","    </tr>\n","    <tr>\n","      <th>14999648</th>\n","      <td>138493</td>\n","      <td>8360</td>\n","      <td>1</td>\n","      <td>2009-10-28 17:21:29</td>\n","    </tr>\n","    <tr>\n","      <th>14999649</th>\n","      <td>138493</td>\n","      <td>2096</td>\n","      <td>1</td>\n","      <td>2009-10-28 17:21:32</td>\n","    </tr>\n","    <tr>\n","      <th>14999650</th>\n","      <td>138493</td>\n","      <td>594</td>\n","      <td>1</td>\n","      <td>2009-10-28 17:21:35</td>\n","    </tr>\n","    <tr>\n","      <th>14999651</th>\n","      <td>138493</td>\n","      <td>45517</td>\n","      <td>0</td>\n","      <td>2009-10-28 17:21:50</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>14999652 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b5b9aa7-894f-4c33-affc-81bfb3acaa4a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1b5b9aa7-894f-4c33-affc-81bfb3acaa4a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1b5b9aa7-894f-4c33-affc-81bfb3acaa4a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["ratings = pd.read_csv('/content/drive/MyDrive/ratings.csv')"],"metadata":{"id":"vFyXTbBkFi8a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ratings = pd.read_csv('/content/drive/MyDrive/MC855/machinelearning/data/raw/ml-1m/ratings.dat',\n","    sep = \"::\",\n","    names = [\"userID\", \"itemID\", \"rating\", \"timestamp\"],\n",")\n","ratings"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":478},"id":"2wdEz34dFq9c","executionInfo":{"status":"ok","timestamp":1669040155998,"user_tz":180,"elapsed":5950,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}},"outputId":"1c753938-7710-4568-fa58-1d970ba00a66"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py:311: ParserWarning: Falling back to the 'python' engine because the 'c' engine does not support regex separators (separators > 1 char and different from '\\s+' are interpreted as regex); you can avoid this warning by specifying engine='python'.\n","  return func(*args, **kwargs)\n"]},{"output_type":"execute_result","data":{"text/plain":["         userID  itemID  rating  timestamp\n","0             1    1193       5  978300760\n","1             1     661       3  978302109\n","2             1     914       3  978301968\n","3             1    3408       4  978300275\n","4             1    2355       5  978824291\n","...         ...     ...     ...        ...\n","1000204    6040    1091       1  956716541\n","1000205    6040    1094       5  956704887\n","1000206    6040     562       5  956704746\n","1000207    6040    1096       4  956715648\n","1000208    6040    1097       4  956715569\n","\n","[1000209 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-860be535-4a07-4039-ad8d-5ec57b4480b1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userID</th>\n","      <th>itemID</th>\n","      <th>rating</th>\n","      <th>timestamp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1193</td>\n","      <td>5</td>\n","      <td>978300760</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>661</td>\n","      <td>3</td>\n","      <td>978302109</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>914</td>\n","      <td>3</td>\n","      <td>978301968</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>3408</td>\n","      <td>4</td>\n","      <td>978300275</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>2355</td>\n","      <td>5</td>\n","      <td>978824291</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1000204</th>\n","      <td>6040</td>\n","      <td>1091</td>\n","      <td>1</td>\n","      <td>956716541</td>\n","    </tr>\n","    <tr>\n","      <th>1000205</th>\n","      <td>6040</td>\n","      <td>1094</td>\n","      <td>5</td>\n","      <td>956704887</td>\n","    </tr>\n","    <tr>\n","      <th>1000206</th>\n","      <td>6040</td>\n","      <td>562</td>\n","      <td>5</td>\n","      <td>956704746</td>\n","    </tr>\n","    <tr>\n","      <th>1000207</th>\n","      <td>6040</td>\n","      <td>1096</td>\n","      <td>4</td>\n","      <td>956715648</td>\n","    </tr>\n","    <tr>\n","      <th>1000208</th>\n","      <td>6040</td>\n","      <td>1097</td>\n","      <td>4</td>\n","      <td>956715569</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1000209 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-860be535-4a07-4039-ad8d-5ec57b4480b1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-860be535-4a07-4039-ad8d-5ec57b4480b1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-860be535-4a07-4039-ad8d-5ec57b4480b1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["ratings"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"FGw8dnewnoyo","executionInfo":{"status":"ok","timestamp":1669045801456,"user_tz":180,"elapsed":577,"user":{"displayName":"Marcela Medicina","userId":"18221795483743632611"}},"outputId":"920b44fd-2120-4d61-da20-1b70acd7d977"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        userId  movieId  rating   timestamp\n","0            1       31     2.5  1260759144\n","1            1     1029     3.0  1260759179\n","2            1     1061     3.0  1260759182\n","3            1     1129     2.0  1260759185\n","4            1     1172     4.0  1260759205\n","...        ...      ...     ...         ...\n","99999      671     6268     2.5  1065579370\n","100000     671     6269     4.0  1065149201\n","100001     671     6365     4.0  1070940363\n","100002     671     6385     2.5  1070979663\n","100003     671     6565     3.5  1074784724\n","\n","[100004 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-e30135de-b52c-4588-9881-cb0763efff7a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>movieId</th>\n","      <th>rating</th>\n","      <th>timestamp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>31</td>\n","      <td>2.5</td>\n","      <td>1260759144</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1029</td>\n","      <td>3.0</td>\n","      <td>1260759179</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1061</td>\n","      <td>3.0</td>\n","      <td>1260759182</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1129</td>\n","      <td>2.0</td>\n","      <td>1260759185</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1172</td>\n","      <td>4.0</td>\n","      <td>1260759205</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>99999</th>\n","      <td>671</td>\n","      <td>6268</td>\n","      <td>2.5</td>\n","      <td>1065579370</td>\n","    </tr>\n","    <tr>\n","      <th>100000</th>\n","      <td>671</td>\n","      <td>6269</td>\n","      <td>4.0</td>\n","      <td>1065149201</td>\n","    </tr>\n","    <tr>\n","      <th>100001</th>\n","      <td>671</td>\n","      <td>6365</td>\n","      <td>4.0</td>\n","      <td>1070940363</td>\n","    </tr>\n","    <tr>\n","      <th>100002</th>\n","      <td>671</td>\n","      <td>6385</td>\n","      <td>2.5</td>\n","      <td>1070979663</td>\n","    </tr>\n","    <tr>\n","      <th>100003</th>\n","      <td>671</td>\n","      <td>6565</td>\n","      <td>3.5</td>\n","      <td>1074784724</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100004 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e30135de-b52c-4588-9881-cb0763efff7a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e30135de-b52c-4588-9881-cb0763efff7a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e30135de-b52c-4588-9881-cb0763efff7a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["seed = 710\n","TOP_K = 10\n","\n","# Select MovieLens data size: 100k, 1m, 10m, or 20m\n","MOVIELENS_DATA_SIZE = '100k'\n","\n","# Model parameters\n","EPOCHS = 100\n","BATCH_SIZE = 256\n","\n","seed=710  # Set None for non-deterministic results\n","train, test = python_chrono_split(ratings, 0.75, col_user ='userId', col_item = 'movieId', col_timestamp ='timestamp')\n","train['rating'] = np.where(train['rating']>2.5, 1, 0)\n","test['rating'] = np.where(test['rating']>2.5, 1, 0)\n","data = NCFDataset(train=train, test=test, seed=seed, col_user ='userId', col_item = 'movieId')"],"metadata":{"id":"GMAFy-bVC1_I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train"],"metadata":{"id":"jZCz_zCpDMJ3","executionInfo":{"status":"ok","timestamp":1669045844796,"user_tz":180,"elapsed":371,"user":{"displayName":"Marcela Medicina","userId":"18221795483743632611"}},"colab":{"base_uri":"https://localhost:8080/","height":424},"outputId":"e0dc9abd-2787-4e08-f2fd-e854a11d7ee9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       userId  movieId  rating   timestamp\n","16          1     2294       0  1260759108\n","17          1     2455       0  1260759113\n","19          1     3671       1  1260759117\n","8           1     1339       1  1260759125\n","9           1     1343       0  1260759131\n","...       ...      ...     ...         ...\n","99980     671     4963       1  1065111855\n","99987     671     5349       1  1065111863\n","99966     671     3751       1  1065111939\n","99973     671     4033       1  1065111954\n","99970     671     4019       1  1065111959\n","\n","[74985 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-de5a74e6-10d4-4462-a4d2-c191816d38a1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>movieId</th>\n","      <th>rating</th>\n","      <th>timestamp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>16</th>\n","      <td>1</td>\n","      <td>2294</td>\n","      <td>0</td>\n","      <td>1260759108</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>1</td>\n","      <td>2455</td>\n","      <td>0</td>\n","      <td>1260759113</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>1</td>\n","      <td>3671</td>\n","      <td>1</td>\n","      <td>1260759117</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>1339</td>\n","      <td>1</td>\n","      <td>1260759125</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1</td>\n","      <td>1343</td>\n","      <td>0</td>\n","      <td>1260759131</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>99980</th>\n","      <td>671</td>\n","      <td>4963</td>\n","      <td>1</td>\n","      <td>1065111855</td>\n","    </tr>\n","    <tr>\n","      <th>99987</th>\n","      <td>671</td>\n","      <td>5349</td>\n","      <td>1</td>\n","      <td>1065111863</td>\n","    </tr>\n","    <tr>\n","      <th>99966</th>\n","      <td>671</td>\n","      <td>3751</td>\n","      <td>1</td>\n","      <td>1065111939</td>\n","    </tr>\n","    <tr>\n","      <th>99973</th>\n","      <td>671</td>\n","      <td>4033</td>\n","      <td>1</td>\n","      <td>1065111954</td>\n","    </tr>\n","    <tr>\n","      <th>99970</th>\n","      <td>671</td>\n","      <td>4019</td>\n","      <td>1</td>\n","      <td>1065111959</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>74985 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de5a74e6-10d4-4462-a4d2-c191816d38a1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-de5a74e6-10d4-4462-a4d2-c191816d38a1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-de5a74e6-10d4-4462-a4d2-c191816d38a1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["model = NCF(n_users=data.n_users,n_items=data.n_items,model_type=\"NeuMF\",n_factors=4,layer_sizes=[16,8,4],\\\n","            n_epochs=EPOCHS,batch_size=BATCH_SIZE,learning_rate=1e-3,verbose=10,seed=seed)\n","# n_factors (int): Dimension of latent space.\n","# layer_sizes (list): Number of layers for MLP.\n","\n","# training the model\n","model.fit(data)"],"metadata":{"id":"rooWDpxU_NGX","colab":{"base_uri":"https://localhost:8080/"},"outputId":"697e0a1a-4634-4d58-fd3d-aba5f31ebf63"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:157: UserWarning: `tf.layers.dense` is deprecated and will be removed in a future version. Please use `tf.keras.layers.Dense` instead.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:193: UserWarning: `tf.layers.dense` is deprecated and will be removed in a future version. Please use `tf.keras.layers.Dense` instead.\n"]}]},{"cell_type":"code","source":["predictions = [[row.userId, row.movieId, model.predict(row.userId, row.movieId)]\n","               for (_, row) in test.iterrows()]"],"metadata":{"id":"yR-DeihHs8pZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# saving the predictions in a dataframe\n","predictions = pd.DataFrame(predictions, columns=['userId', 'movieId', 'prediction'])\n","predictions.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"HhNWw9VVs6T3","executionInfo":{"status":"ok","timestamp":1669046910362,"user_tz":180,"elapsed":17,"user":{"displayName":"Marcela Medicina","userId":"18221795483743632611"}},"outputId":"6a46a715-5c06-44a9-e845-336c3ebe4521"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   userId  movieId  prediction\n","0       1     2150    0.369759\n","1       1     2193    0.103052\n","2       1     2968    0.003392\n","3       1     1405    0.002675\n","4       1     1172    0.170407"],"text/html":["\n","  <div id=\"df-d9b871a3-fe41-4543-9bee-42484c562866\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>movieId</th>\n","      <th>prediction</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>2150</td>\n","      <td>0.369759</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2193</td>\n","      <td>0.103052</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>2968</td>\n","      <td>0.003392</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1405</td>\n","      <td>0.002675</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1172</td>\n","      <td>0.170407</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d9b871a3-fe41-4543-9bee-42484c562866')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d9b871a3-fe41-4543-9bee-42484c562866 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d9b871a3-fe41-4543-9bee-42484c562866');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["model.save('/content/drive/MyDrive/')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":289},"id":"gyEcEVWW83fL","executionInfo":{"status":"error","timestamp":1669047370067,"user_tz":180,"elapsed":10,"user":{"displayName":"Marcela Medicina","userId":"18221795483743632611"}},"outputId":"fc9a27c3-1e24-4ebc-bd4b-a841a857a29b"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-a0d569a2f182>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-4-dfbfdfb6e0be>\u001b[0m in \u001b[0;36msave\u001b[0;34m(self, dir_name)\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdir_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m             \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmakedirs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdir_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 218\u001b[0;31m         \u001b[0msaver\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSaver\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    219\u001b[0m         \u001b[0msaver\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msess\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdir_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"model.ckpt\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    220\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: module 'tensorflow._api.v2.train' has no attribute 'Saver'"]}]},{"cell_type":"code","source":["users, items, preds = [], [], []\n","item = list(train.movieId.unique())\n","for user in train.userId.unique():\n","    user = [user] * len(item) \n","    users.extend(user)\n","    items.extend(item)\n","    preds.extend(list(model.predict(user, item, is_list=True)))\n","\n","all_predictions = pd.DataFrame(data={\"userId\": users, \"movieId\":items, \"prediction\":preds})\n","\n","merged = pd.merge(train, all_predictions, on=[\"userId\", \"movieId\"], how=\"outer\")\n","all_predictions = merged[merged.rating.isnull()].drop('rating', axis=1)\n","\n","eval_map = map_at_k(test, all_predictions, col_prediction='prediction', k=TOP_K, col_user ='userId', col_item = 'movieId')\n","eval_ndcg = ndcg_at_k(test, all_predictions, col_prediction='prediction', k=TOP_K, col_user ='userId', col_item = 'movieId')\n","eval_precision = precision_at_k(test, all_predictions, col_prediction='prediction', k=TOP_K,col_user ='userId', col_item = 'movieId')\n","eval_recall = recall_at_k(test, all_predictions, col_prediction='prediction', k=TOP_K,col_user ='userId', col_item = 'movieId')"],"metadata":{"id":"tZu_Cu1eBvl9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["all_predictions"],"metadata":{"id":"Fol6liLfC42e","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1669044254424,"user_tz":180,"elapsed":9,"user":{"displayName":"Marcela Medicina","userId":"18221795483743632611"}},"outputId":"080612fe-6f44-4e69-bfc4-e6b44b2d176c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         userId  movieId  timestamp    prediction\n","74985         1      296        NaN  8.989000e-01\n","74986         1      592        NaN  5.811705e-01\n","74987         1      590        NaN  2.903144e-02\n","74988         1      150        NaN  1.893132e-01\n","74989         1      165        NaN  1.219370e-01\n","...         ...      ...        ...           ...\n","4973447     671    80846        NaN  7.362326e-15\n","4973448     671     4277        NaN  6.377749e-07\n","4973449     671     3563        NaN  4.703703e-25\n","4973450     671      129        NaN  4.797377e-07\n","4973451     671     6425        NaN  1.470238e-25\n","\n","[4898467 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-9c1ec2a2-604b-4ae1-a99b-b2c971a2cffe\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>userId</th>\n","      <th>movieId</th>\n","      <th>timestamp</th>\n","      <th>prediction</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>74985</th>\n","      <td>1</td>\n","      <td>296</td>\n","      <td>NaN</td>\n","      <td>8.989000e-01</td>\n","    </tr>\n","    <tr>\n","      <th>74986</th>\n","      <td>1</td>\n","      <td>592</td>\n","      <td>NaN</td>\n","      <td>5.811705e-01</td>\n","    </tr>\n","    <tr>\n","      <th>74987</th>\n","      <td>1</td>\n","      <td>590</td>\n","      <td>NaN</td>\n","      <td>2.903144e-02</td>\n","    </tr>\n","    <tr>\n","      <th>74988</th>\n","      <td>1</td>\n","      <td>150</td>\n","      <td>NaN</td>\n","      <td>1.893132e-01</td>\n","    </tr>\n","    <tr>\n","      <th>74989</th>\n","      <td>1</td>\n","      <td>165</td>\n","      <td>NaN</td>\n","      <td>1.219370e-01</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4973447</th>\n","      <td>671</td>\n","      <td>80846</td>\n","      <td>NaN</td>\n","      <td>7.362326e-15</td>\n","    </tr>\n","    <tr>\n","      <th>4973448</th>\n","      <td>671</td>\n","      <td>4277</td>\n","      <td>NaN</td>\n","      <td>6.377749e-07</td>\n","    </tr>\n","    <tr>\n","      <th>4973449</th>\n","      <td>671</td>\n","      <td>3563</td>\n","      <td>NaN</td>\n","      <td>4.703703e-25</td>\n","    </tr>\n","    <tr>\n","      <th>4973450</th>\n","      <td>671</td>\n","      <td>129</td>\n","      <td>NaN</td>\n","      <td>4.797377e-07</td>\n","    </tr>\n","    <tr>\n","      <th>4973451</th>\n","      <td>671</td>\n","      <td>6425</td>\n","      <td>NaN</td>\n","      <td>1.470238e-25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4898467 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9c1ec2a2-604b-4ae1-a99b-b2c971a2cffe')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9c1ec2a2-604b-4ae1-a99b-b2c971a2cffe button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9c1ec2a2-604b-4ae1-a99b-b2c971a2cffe');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["a = np.where(all_predictions['prediction']>0.5, 1, 0)"],"metadata":{"id":"ybHAglDjzWVs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["unique, counts = np.unique(a, return_counts=True)"],"metadata":{"id":"AmCjOvaV0Rpz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dict(zip(unique, counts))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q_-ZQXhP0-b-","executionInfo":{"status":"ok","timestamp":1669044910580,"user_tz":180,"elapsed":9,"user":{"displayName":"Marcela Medicina","userId":"18221795483743632611"}},"outputId":"dfe1c4eb-b868-4950-8617-57275fed5f3b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 4732449, 1: 166018}"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["ncf = NCF(n_users=1, n_items =2)"],"metadata":{"id":"3x7Vw0FU1DNj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669052974103,"user_tz":180,"elapsed":2200,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}},"outputId":"043d6d7e-7089-43f4-cafb-0053175a4166"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:157: UserWarning: `tf.layers.dense` is deprecated and will be removed in a future version. Please use `tf.keras.layers.Dense` instead.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:193: UserWarning: `tf.layers.dense` is deprecated and will be removed in a future version. Please use `tf.keras.layers.Dense` instead.\n"]}]},{"cell_type":"code","source":["ncf.load(neumf_dir='/content/drive/Shareddrives/Filmes Pra TI - Machine Learning/Modelo_Marcela/')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":330},"id":"1uvSC6RQTl86","executionInfo":{"status":"error","timestamp":1669053282887,"user_tz":180,"elapsed":317,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}},"outputId":"8019e10e-3d00-420d-81ae-91c1526a9cd2"},"execution_count":9,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-c88921e2a84f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mncf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mneumf_dir\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'/content/drive/Shareddrives/Filmes Pra TI - Machine Learning/Modelo_Marcela/'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-5-3e29f91dc837>\u001b[0m in \u001b[0;36mload\u001b[0;34m(self, gmf_dir, mlp_dir, neumf_dir, alpha)\u001b[0m\n\u001b[1;32m    241\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_type\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"neumf\"\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mneumf_dir\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    242\u001b[0m             \u001b[0msaver\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mv1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSaver\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 243\u001b[0;31m             \u001b[0msaver\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrestore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msess\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mneumf_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"model.ckpt\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    244\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    245\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_type\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"neumf\"\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgmf_dir\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mmlp_dir\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/training/saver.py\u001b[0m in \u001b[0;36mrestore\u001b[0;34m(self, sess, save_path)\u001b[0m\n\u001b[1;32m   1408\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcheckpoint_management\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheckpoint_exists_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcheckpoint_prefix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1409\u001b[0m       raise ValueError(\"The passed save_path is not a valid checkpoint: \" +\n\u001b[0;32m-> 1410\u001b[0;31m                        checkpoint_prefix)\n\u001b[0m\u001b[1;32m   1411\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1412\u001b[0m     \u001b[0mlogging\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Restoring parameters from %s\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheckpoint_prefix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: The passed save_path is not a valid checkpoint: /content/drive/Shareddrives/Filmes Pra TI - Machine Learning/Modelo_Marcela/model.ckpt"]}]},{"cell_type":"code","source":["model2 = NCF(n_users=1,n_items=1,model_type=\"NeuMF\", ckpt_file=' /content/drive/Shareddrives/Filmes Pra TI - Machine Learning/Modelo_Marcela/model_100k/model_100k.ckpt')\n","\n","model2.load(neumf_dir=' /content/drive/Shareddrives/Filmes Pra TI - Machine Learning/Modelo_Marcela/model_100k')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":219},"id":"TwDmEqgnUhz8","executionInfo":{"status":"error","timestamp":1669053799286,"user_tz":180,"elapsed":748,"user":{"displayName":"Marcela Medicina","userId":"17288344570535601151"}},"outputId":"d1db3373-57b4-4cbb-f48b-3eb62c17700d"},"execution_count":18,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-d066637ae3fa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mNCF\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_users\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn_items\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmodel_type\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"NeuMF\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mckpt_file\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m' /content/drive/Shareddrives/Filmes Pra TI - Machine Learning/Modelo_Marcela/model_100k/model_100k.ckpt'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mmodel2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mneumf_dir\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m' /content/drive/Shareddrives/Filmes Pra TI - Machine Learning/Modelo_Marcela/model_100k'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: __init__() got an unexpected keyword argument 'ckpt_file'"]}]},{"cell_type":"code","source":[],"metadata":{"id":"uOsdtawgV0cI"},"execution_count":null,"outputs":[]}]}